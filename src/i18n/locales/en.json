{
  "cli": {
    "description": "CLI to facilitate Git usage with natural language (Git Quick Quick)",
    "version": "1.0.0",
    "unknownCommand": "Command not found in GitQQ: %s",
    "redirectingToGit": "Redirecting to native Git command...",
    "gitCommandFailed": "Git command failed with exit code: %s",
    "gitExecutionError": "Error executing Git command:",
    "gitCommandSuccess": "✅ Git command completed successfully."
  },
  "commands": {
    "commit": {
      "description": "Creates a commit following Conventional Commits conventions",
      "options": {
        "message": "Commit message (optional)",
        "type": "Semantic commit type",
        "scope": "Scope of the change (optional)",
        "breaking": "Indicates a breaking change",
        "description": "Detailed description of the commit (optional)",
        "fullMessage": "Complete commit message (overrides other options)",
        "nonInteractive": "Use non-interactive mode (skip prompts)"
      },
      "prompts": {
        "selectType": "Select the type of change:",
        "enterScope": "What is the scope of this change (optional):",
        "isBreaking": "Does this change break backward compatibility?",
        "shortDescription": "Write a short description:",
        "longDescription": "Provide a longer description (optional):",
        "descriptionRequired": "Description is required",
        "continueWithUnstagedChanges": "You have unstaged changes. Do you want to continue with the commit?"
      },
      "messages": {
        "generatingCommit": "📝 Generating commit with message: \"{0}\"",
        "commitSuccess": "✅ Commit created successfully.",
        "commitError": "❌ Error creating commit:",
        "invalidType": "❌ Invalid commit type: {0}",
        "validTypes": "Valid commit types:",
        "messageRequired": "❌ You must provide a message for the commit",
        "breakingChange": "BREAKING CHANGE: This change breaks compatibility with previous versions.",
        "repoStatus": "📊 Repository Status:",
        "stagedChanges": "🟢 Staged changes (will be committed):",
        "unstagedChanges": "🟠 Unstaged changes (will NOT be committed):",
        "modifiedFiles": "Modified files:",
        "modifiedNotStaged": "🟠 Modified files (changes not staged for commit):",
        "newFiles": "New files:",
        "deletedFiles": "Deleted files:",
        "deletedNotStaged": "🟠 Deleted files (not staged for commit):",
        "renamedFiles": "Renamed files:",
        "untrackedFiles": "🔵 Untracked files (not included in commit):",
        "conflictedFiles": "⚠️ Conflicted files (resolve before committing):",
        "noStagedChanges": "❌ No staged changes found. Nothing to commit.",
        "stageChangesHint": "💡 Use 'git add <file>' to stage changes before committing.",
        "commitCancelled": "🛑 Commit operation cancelled.",
        "commitSummary": "📋 Summary: {0} changes to commit, {1} changes not staged for commit."
      }
    },
    "initProject": {
      "description": "Initializes a Git repository and creates an empty first commit",
      "messages": {
        "initializingRepo": "📂 Initializing Git repository...",
        "repoInitialized": "✅ Git repository initialized.",
        "creatingCommit": "📝 Creating first empty commit...",
        "projectInitialized": "✅ Git project successfully initialized.",
        "initError": "❌ Error initializing project:"
      }
    },
    "formatCommits": {
      "description": "Format existing commits to conventional commit format",
      "options": {
        "fromCommit": "Starting commit hash to analyze"
      },
      "messages": {
        "invalidCommit": "❌ Invalid commit hash: {0}",
        "noCommits": "No commits found to format.",
        "foundCommits": "Found {0} commits to analyze.\n",
        "alreadyConventional": "✅ Commit {0} is already in conventional format: \"{1}\"",
        "suggestedChange": "🔄 {0}: \"{1}\" => \"{2}\"",
        "allConventional": "\nAll commits are already in conventional format. Nothing to format.",
        "reviewingCommit": "\nReviewing commit {0}/{1}:",
        "originalCommit": "Original: \"{0}\"",
        "suggestedCommit": "Suggested: \"{0}\"",
        "noCommitsSelected": "\nNo commits selected for formatting. Operation cancelled.",
        "summary": "\n📋 Summary of changes to be applied:",
        "applyingChanges": "\n🔄 Applying changes to commit history...",
        "updatedCommit": "✅ Updated commit {0}",
        "errorUpdating": "❌ Error updating commit {0}:",
        "conversionComplete": "\n✅ Commit formatting completed successfully!",
        "forcePushWarning": "⚠️  Note: This operation has rewritten your git history. If you've already pushed these commits,\n   you'll need to force push with 'git push --force'.",
        "conversionError": "❌ Error formatting commits:"
      },
      "prompts": {
        "commitAction": "What would you like to do with this commit?",
        "acceptSuggestion": "Accept suggestion",
        "editSuggestion": "Edit suggestion",
        "skipCommit": "Skip this commit",
        "confirmRewrite": "Are you sure you want to rewrite {0} commits?",
        "operationCancelled": "Operation cancelled."
      }
    },
    "status": {
      "description": "Shows the working tree status",
      "messages": {
        "repoStatus": "📊 Repository Status:",
        "branchInfo": "🌿 Current branch: {0}",
        "ahead": "📤 Your branch is ahead of the remote by {0} commit(s)",
        "behind": "📥 Your branch is behind the remote by {0} commit(s)",
        "aheadBehind": "📤📥 Your branch is ahead by {0} and behind by {1} commit(s)",
        "cleanRepo": "✨ Working tree clean. No changes to commit.",
        "statusError": "❌ Error checking repository status:"
      },
      "errors": {
        "checkStatus": "❌ Error checking repository status:"
      }
    }
  },
  "commitTypes": {
    "feat": "New features",
    "fix": "Bug fixes",
    "docs": "Documentation changes",
    "style": "Changes that do not affect the meaning of the code (whitespace, formatting, etc.)",
    "refactor": "Code changes that neither fix bugs nor add features",
    "perf": "Performance improvements",
    "test": "Adding or correcting tests",
    "build": "Changes that affect the build system or external dependencies",
    "ci": "Changes to CI configuration and scripts",
    "chore": "Other changes that don't modify src or test files",
    "revert": "Reverts a previous commit"
  },
  "config": {
    "saved": "✅ Configuration saved successfully.",
    "error": "❌ Error saving configuration:",
    "currentLanguage": "Current language: {0}",
    "selectLanguage": "Select a language:"
  }
} 